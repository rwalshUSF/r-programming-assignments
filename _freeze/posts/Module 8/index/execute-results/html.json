{
  "hash": "127053987084038f8171457d913b3041",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module # 8: Assignment: Input/Output, String Manipulation, and the plyr Package\"\nauthor: \"Robert Walsh\"\ndate: \"2025-10-13\"\n---\n\n\n\nThis is my Module #8 post for my LIS4370 blog. Welcome!\n\nCode repository:\n\n[![](mod8git.png)](mod8git.png)\n\n<https://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-08-Input-Output-string>\n\n------------------------------------------------------------------------\n\nTask \\# 1 - Import Assignment 6 Data\n\n------------------------------------------------------------------------\n\nIn order to read a text file from a computer into RStudio, the working directory must be specified or set. Then calling the read.table() function will read the file in table format and creates a data frame from it, with records corresponding to lines and variables/values to fields in the file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Place the Assignment 6 dataset (tab‑ or space‑delimited) on your computer.\n#In R, read it into a data frame:\n\n#set working directory\nsetwd(\"C:/R Programming Journal – Robert Walsh/posts/Module 8\")\n# choose file\nstudent6 <- read.table(\"Assignment 6 Dataset.txt\", header = TRUE, stringsAsFactors = FALSE,sep = \",\")\nstudent6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Name Age    Sex Grade\n1       Raul  25   Male    80\n2     Booker  18   Male    83\n3      Lauri  21 Female    90\n4     Leonie  21 Female    91\n5    Sherlyn  22 Female    85\n6    Mikaela  20 Female    69\n7    Raphael  23   Male    91\n8       Aiko  24 Female    97\n9   Tiffaney  21 Female    78\n10    Corina  23 Female    81\n11 Petronila  23 Female    98\n12    Alecia  20 Female    87\n13   Shemika  23 Female    97\n14    Fallon  22 Female    90\n15   Deloris  21 Female    67\n16    Randee  23 Female    91\n17     Eboni  20 Female    84\n18   Delfina  19 Female    93\n19 Ernestina  19 Female    93\n20      Milo  19   Male    67\n```\n\n\n:::\n:::\n\n\n\nNext, the 'student6' data frame stored in memory can be used to organize or group specific records along with the data or text that they contain in their elements or components. The 'plyr' package contains helpful functions such as ddply() which can accept arguments to select specific rows and/or columns of a data frame, conduct operations on the data, and add new columns or rows that have the results organized as specified by the commands. In this case, the results are stored in a new object named 'gender_mean' that includes a new column named 'GradeAverage' that stores the mean of Grade by Sex and groups the records by Sex.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load plyr and compute the mean of Grade by Sex\nlibrary(plyr)\ngender_mean <- ddply(\n  student6,\n  \"Sex\",\n  transform,\n  GradeAverage = mean(Grade, na.rm = TRUE)\n)\ngender_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Name Age    Sex Grade GradeAverage\n1      Lauri  21 Female    90      86.9375\n2     Leonie  21 Female    91      86.9375\n3    Sherlyn  22 Female    85      86.9375\n4    Mikaela  20 Female    69      86.9375\n5       Aiko  24 Female    97      86.9375\n6   Tiffaney  21 Female    78      86.9375\n7     Corina  23 Female    81      86.9375\n8  Petronila  23 Female    98      86.9375\n9     Alecia  20 Female    87      86.9375\n10   Shemika  23 Female    97      86.9375\n11    Fallon  22 Female    90      86.9375\n12   Deloris  21 Female    67      86.9375\n13    Randee  23 Female    91      86.9375\n14     Eboni  20 Female    84      86.9375\n15   Delfina  19 Female    93      86.9375\n16 Ernestina  19 Female    93      86.9375\n17      Raul  25   Male    80      80.2500\n18    Booker  18   Male    83      80.2500\n19   Raphael  23   Male    91      80.2500\n20      Milo  19   Male    67      80.2500\n```\n\n\n:::\n:::\n\n\n\nThe write.table() function is a helpful tool in RStudio that allows a program to write data from a data frame into a text file and store it in the working directory.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Write the grouped means to a text file\nwrite.table(\n  gender_mean,\n  file = \"gender_mean.txt\",\n  sep  = \",\",\n  row.names = FALSE\n)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\nTask \\# 2 - Filter Names Containing 'i'\n\n------------------------------------------------------------------------\n\nTo conduct further analysis or operations on a subset of the data in the 'student6' data frame, the subset() function allows the program to filter character data in strings with regular expressions. The data frame is passed into the function as an argument, along with the reg ex expression using the grep() function. This matches the data to the specified parameters and returns matching values or records as indicated/requested. The results include students who's Name includes an 'i' or 'I' character.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Convert the data (if not already) to a data frame (see above).\n#Select rows where Name contains 'i' or 'I'\ni_students <- subset(\n  student6,\n  grepl(\"[iI]\", Name, ignore.case = TRUE)\n)\ni_students\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Name Age    Sex Grade\n3      Lauri  21 Female    90\n4     Leonie  21 Female    91\n6    Mikaela  20 Female    69\n8       Aiko  24 Female    97\n9   Tiffaney  21 Female    78\n10    Corina  23 Female    81\n11 Petronila  23 Female    98\n12    Alecia  20 Female    87\n13   Shemika  23 Female    97\n15   Deloris  21 Female    67\n17     Eboni  20 Female    84\n18   Delfina  19 Female    93\n19 Ernestina  19 Female    93\n20      Milo  19   Male    67\n```\n\n\n:::\n:::\n\n\n\nFrom this subset/data frame, the Names of the selected students can be extracted and written to a .csv comma separated values file in the working directory for further operations or analysis specifications.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Extract just the names and write them to a CSV\nwrite.csv(\n  i_students$Name,\n  file      = \"i_students.csv\",\n  row.names = FALSE,\n  quote     = FALSE\n)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\nTask \\# 3 - Export Filtered Dataset\n\n------------------------------------------------------------------------\n\nFinally, all of the records in the 'i_students' data frame can be exported to a .csv comma separated values file in the working directory or any specified directory chosen for further operations or analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Save the full filtered data frame to a CSV\nwrite.csv(\n  i_students,\n  file      = \"i_students_full.csv\",\n  row.names = FALSE\n)\n\n#Confirm the files gender_mean.txt, i_students.csv, and i_students_full.csv\n#exist in your working directory.\n```\n:::\n\n\n\n[![](wd_files.png)](wd_files.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}