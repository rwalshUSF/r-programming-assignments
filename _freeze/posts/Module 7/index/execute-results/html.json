{
  "hash": "1aca463d6f1f4a4b32e7d1a4efe87454",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module # 7: Assignment: Exploring Râ€™s Object Oriented Systems (S3 & S4)\"\nauthor: \"Robert Walsh\"\ndate: \"2025-10-08\"\n---\n\n\n\nThis is my Module #7 post for my LIS4370 blog. Welcome!\n\nCode repository:\n\n[![](mod7git.png)](mod7git.png)\n\n<https://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-07-R-Object>\n\n********************************************************************************************************\n\nTask \\# 1 - Choose or Download Data\n\n********************************************************************************************************\n\nR is an interesting programming language that utilizes object oriented programming methods and structure to maximize the benefits of the four pillars of OOP, Encapsulation, Abstraction, Inheritance, and Polymorphism.\n\nWhat makes the R programming language unique, interesting, and versatile is the ability to create two distinct types of objects that have different characteristics and uses. The principal differences between S3 and S4 objects include the way in which classes are defined (S3 setting 'class' attribute & S4 using a setClass() method before object instantiation) and the structure of the object (S3 objects are informal, classes are not formally defined, becoming an object when a 'class' attribute is assigned & S4 objects are formal, structured objects that require 'class' definitions to specify class name and slots).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load the \"mtcars\" data set and store to an r object 'my_cars'\ndata(\"mtcars\")\nmy_cars<-mtcars\n#Print the first 5 rows of 'my_cars' object\nhead(my_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n\n```{.r .cell-code}\n#Explore the structure of 'my_cars' object\nstr(my_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n\n\n:::\n:::\n\n\n\nFrom the output above, the head() function executed, indicating that the object is an S3 object. Passing an S4 object as an argument to the head() function generates an error explaining that S4 objects are not subsetable.\n\nThe first line of output from the str() function call shows the objects type, in this case, it is a 'data.frame'. Had this have been an S4 object, the output would have stated that the object is of a formal class and listed its name. This will be demonstrated in the Task 3 chunk of code that calls generic functions on both S3 and S4 objects to compare compatibility and output.\n\n*********************************************************************************************************\n\nTask \\# 2 - Test Generic Functions\n\n*********************************************************************************************************\n\nWe can tell if an object is an S3 or S4 class system object by using the isS4() method; if it is an S4 object, TRUE is returned, if it is an S3 object, FALSE is returned. A few more ways to check the objects class system are using the str() function (which starts its output with Formal class if it is an S4 object) and the class() function which shows the class name; for S3 objects, it doesn't reveal the type of object system, while for S4 objects, it gives the formal class name.\n\nA generic function in 'r' is a fundamental utility of the 'S3' OOP system which allows a function call to behave differently based on the class of the object passed to it (method dispatch). When a generic function is called, r selects the method associated with the class of the object and uses a default if none are found. S3 objects method dispatch is based on the class attribute of the first argument and S4 can handle multiple dispatch (multiple arguments classes). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Check to see if 'my_cars' is an S3 or S4 class object\nisS4(my_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n#The output is 'FALSE' therefore 'my_cars' is an S3 object and the following\n#generic functions will dispatch:\n\n#print() - to display the object's data\nprint(my_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n\n\n:::\n\n```{.r .cell-code}\n#summary() - gives a summary of the objects variables statistics\nsummary(my_cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n\n\n:::\n\n```{.r .cell-code}\n#plot() - plots the variables on a graph\nplot(my_cars)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n********************************************************************************************************\n\nTask \\# 3 - Explore S3 vs. S4\n\n********************************************************************************************************\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#S3 object example\n\n#Create an S3 object using list() and initializing variables upon creation\ns3_obj <- list(car = \"Ferarri\", year = 2009, cost = 135000)\n\n#Set the class of the object as an attribute\nclass(s3_obj) <- \"car_s3\"\nclass(s3_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car_s3\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#mode() - generic function to display object mode\nmode(s3_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#print() - generic function dispatch to display object\nprint(s3_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$car\n[1] \"Ferarri\"\n\n$year\n[1] 2009\n\n$cost\n[1] 135000\n\nattr(,\"class\")\n[1] \"car_s3\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#str() - generic function dispatch for display of the internal structure\nstr(s3_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ car : chr \"Ferarri\"\n $ year: num 2009\n $ cost: num 135000\n - attr(*, \"class\")= chr \"car_s3\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# The output above uses the class() function to determine the class of the object\n# the output [1] \"car_s3\" is displayed because that is what the attribute was set to\n# the mode() returns [1] \"list\" because that is the object type. The print()\n# displays the attr(,\"class\") as [1] \"car_s3\" and str() states: - attr(*, \"class\")= chr \"car_s3\"\n\n\n#S4 class and object example\n\n#Create an S4 class using setClass() and define class variables upon creation\nsetClass(\"car_s4\",slots = c(car = \"character\", year = \"numeric\", cost = \"numeric\"))\n\n#Instantiate a new S4 object by calling the new() and initializing the variables\ns4_obj <- new(\"car_s4\", car = \"Porsche\", year = 2009, cost = 75000)\nclass(s4_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car_s4\"\nattr(,\"package\")\n[1] \".GlobalEnv\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#mode() - generic function to display object mode\nmode(s4_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"S4\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#print() - generic function dispatch to display object\nprint(s4_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn object of class \"car_s4\"\nSlot \"car\":\n[1] \"Porsche\"\n\nSlot \"year\":\n[1] 2009\n\nSlot \"cost\":\n[1] 75000\n```\n\n\n:::\n\n```{.r .cell-code}\n#str() - generic function dispatch for display of the internal structure\nstr(s4_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFormal class 'car_s4' [package \".GlobalEnv\"] with 3 slots\n  ..@ car : chr \"Porsche\"\n  ..@ year: num 2009\n  ..@ cost: num 75000\n```\n\n\n:::\n\n```{.r .cell-code}\n# The output above uses the class() function to determine the class of the object\n# the output [1] \"car_s4\" attr(,\"package\") [1] \".GlobalEnv\" is displayed because\n# it is an S4 object and the mode() returns [1] \"S4\", the object type.\n# The print() displays An object of class \"car_s4\" and the Slots/values, and\n# str() states: Formal class 'car_s4' [package \".GlobalEnv\"] with 3 slots\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}