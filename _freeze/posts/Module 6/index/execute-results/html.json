{
  "hash": "873e7cc13a9215569d8678652986a92e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module # 6: Assignment: Matrix Operations and Construction\"\nauthor: \"Robert Walsh\"\ndate: \"2025-09-26\"\n---\n\n\n\nThis is my Module #6 post for my LIS4370 blog. Welcome!\n\nCode repository:\n\n![](mod6git.png)\n\n<https://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-06-doing-math-2>\n\nTask \\# 1 - Matrix Addition & Subtraction\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#In R, define:\nA<-matrix(c(2,0,1,3),ncol=2)\n#Using the matrix() function to create a matrix \"A\" with 2 rows and 2 columns that\n#includes scalar values of \"2,0,1,3\". R will row bind the elements by default\n#and the resulting matrix looks like this:\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    2    1\n[2,]    0    3\n```\n\n\n:::\n\n```{.r .cell-code}\n#Using the matrix() function again to create another matrix \"B\" with 2 rows and\n#2 columns that includes scalar values of \"5,2,4,-1\".\nB<-matrix(c(5,2,4,-1),ncol=2)\n#R will row bind the elements\n#by default and the resulting matrix looks like this:\nB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    5    4\n[2,]    2   -1\n```\n\n\n:::\n\n```{.r .cell-code}\n#Then:\n\n#Compute A + B and display the result.\nAplusB<-A+B\n#Matrix \"A\" and \"B\" can be added together using the following code that will\n#take the value from one cell and add it to the value in the same cell in the\n#second matrix. Here is the resulting matrix after calculations:\nAplusB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    7    5\n[2,]    2    2\n```\n\n\n:::\n\n```{.r .cell-code}\n#Compute A - B and display the result.\nAminusB<-A-B\n#Matrix \"A\" and \"B\" can be subtracted from each other using the following code\n#that will take the value from one cell and subtract it from the value in the\n#same cell in the second matrix. Here is the resulting matrix after calculations:\nAminusB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   -3   -3\n[2,]   -2    4\n```\n\n\n:::\n:::\n\n\n\nTask \\# 2 - Create a Diagonal Matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Use diag() to build a 4×4 matrix with diagonal entries 4, 1, 2, 3:\n#Show the code and the resulting matrix.\nD<-diag(c(4,1,2,3))\n#The diag() function creates a matrix with the specified vales/vector appearing\n#diagonally from top left to bottom right. The results look like this:\nD\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]    4    0    0    0\n[2,]    0    1    0    0\n[3,]    0    0    2    0\n[4,]    0    0    0    3\n```\n\n\n:::\n:::\n\n\n\nTask \\# 3 - Construct a Custom 5×5 Matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Generate this matrix:\n#  [,1] [,2] [,3] [,4] [,5]\n#[1,]    3    1    1    1    1\n#[2,]    2    3    0    0    0\n#[3,]    2    0    3    0    0\n#[4,]    2    0    0    3    0\n#[5,]    2    0    0    0    3\n#Hint: combine diag() with cbind() or matrix().\n\n#This was a fun and challenging exercise. It was similar to solving a puzzle.\n#There are several ways to accomplish this task, however, I wanted to see if it\n#could be constructed by multiplying two matrices together.\n\n#Define the first matrix \"A\" as an identity matrix to base the row values\n#that will be used in the multiplication using the matrix() and cbind() functions\nA<-matrix(cbind(c(1,2,2,2,2),c(1,1,0,0,0),c(1,0,1,0,0),c(1,0,0,1,0),c(1,0,0,0,1)),nrow=5)\n\n#Define matrix \"B\" using the diag() function to complete the necessary calculations\n#to place the correct values in the resulting matrix\nB<-diag(c(1,3,3,3,3))\n\n#Multiply the two matrices together using the correct syntax to multiply matrices\n#in R and store the resulting matrix in a new matrix object.\nmatrix5x5<-A%*%B\n#This is what I got:\nmatrix5x5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    3    3    3\n[2,]    2    3    0    0    0\n[3,]    2    0    3    0    0\n[4,]    2    0    0    3    0\n[5,]    2    0    0    0    3\n```\n\n\n:::\n\n```{.r .cell-code}\n#Unfortunately, after trying many combinations of numbers, I could not construct\n#the desired output with one multiplication of two matrices, so I had to manually\n#update a couple values for the output to match the desired results/matrix.\n\n# Fix the first row, first column to be 3\nmatrix5x5[1,1]<-3\n# Fix the first row, columns 2-5 to be 1\nmatrix5x5[1,2:5] <- 1\n# Print the correct matrix\nprint(matrix5x5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    3    1    1    1    1\n[2,]    2    3    0    0    0\n[3,]    2    0    3    0    0\n[4,]    2    0    0    3    0\n[5,]    2    0    0    0    3\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}