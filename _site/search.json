[
  {
    "objectID": "posts/Module 9/index.html",
    "href": "posts/Module 9/index.html",
    "title": "Module # 9: Assignment: Visualization in R – Base Graphics, Lattice, and ggplot2",
    "section": "",
    "text": "This is my Module #9 post for my LIS4370 blog. Welcome!\nCode repository:\n\nhttps://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-09-visualization-R\n\nTask # 1 - Base R Graphics\n\nBase R Graphics provides the most fundamental, low-level control/functions, building plots incrementally. This comes at the cost of minimal-code efficiency. Customization is done via arguments passed to functions or through global par() settings, which are not plot-specific. Achieving a publication-quality base plot is possible but requires a high degree of manual customization (requiring many separate function calls and manual placement of elements), which can be difficult to replicate. There is no native support for faceting, we must manually manage plotting with par(mfrow) and loops, which is challenging for complex multi-panel arrangements.\n\n#Create at least two plots using base R functions:\nlibrary(ggplot2)\ndata(\"diamonds\")\nmyDF&lt;-diamonds\n\n#Base R plot() function\nplot(myDF$carat,myDF$price,\n     main=\"Base R - scatter plot: Price vs. Carat\",\n     xlab=\"Carat\",\n     ylab=\"Price\")\n\n\n\n\n\n\n\n#Base R hist() function\nhist(myDF$price,\n     main=\"Base R - histogram: Price\",\n     xlab=\"Price\",\n     ylab=\"Freq\")\n\n\n\n\n\n\n\n\n\nTask # 2 - Lattice Graphics\n\nLattice Graphics provides different control/functions, with formula-based syntax, which is different from the function based approach in base R. The shift from an incremental to an object-based workflow is challenging given the learning curve. In lattice, we define the entire plot at once, unlike the stepwise construction in base R. Customization is complex; high-level functions handle most instructions, however, fine-tuning requires more specialized panel functions and par.settings. Lattice functions let us view information and relationships between different attributes in single/multi window grid. Lattice is designed for faceting using the formula ‘y~x,z’ a strength of the package/library.\n\n#Use the lattice package to produce conditioned or multivariate plots:\nlibrary(lattice)\n\n# Conditional scatter plot (small multiples)\nxyplot(price ~ carat | factor(clarity),\n       data = myDF,\n       main = \"Lattice: - Conditional scatter plot: Price vs. Carat by Clarity\")\n\n\n\n\n\n\n\n# Box-and-whisker plot\nbwplot(carat ~ factor(cut),\n       data = myDF,\n       main = \"Lattice: - Box-and-whisker plot: Carat vs. Cut\")\n\n\n\n\n\n\n\n\n\nTask # 3 - ggplot2\n\nggplot2 is by far my favorite and is arguably regarded as the best system for producing publication-quality output with minimal code. While offering simple, effective defaults, ggplot2 also provides extra control over every aspect of the plot through scales, and layer modifications. You build plots by adding layers with the + operator, where each layer controls a specific part of the graphic. As demonstrated below, ggplot() objects are highly customizable via layers, labels, and scales.\n\n#Use ggplot2’s grammar of graphics to create layered visuals:\nlibrary(ggplot2)\n\n# Scatter plot with smoothing\nggplot(myDF,aes(x=carat,y=price,color=factor(color))) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  ylim(c(0,20000)) +\n  xlim(c(0,5)) +\n  labs(title = \"ggplot2: Price vs. Carat with trend by Color group\")\n\n\n\n\n\n\n\n# Faceted histogram\nggplot(myDF,aes(carat)) +\n  geom_histogram(binwidth = 0.25,color=\"white\") +\n  facet_wrap(~ cut,scales=\"free\") +\n  labs(title = \"ggplot2: Carat distribution by Cut category\")\n\n\n\n\n\n\n\n\nOne thing I found surprising is in regards to compatibility. ggplot2 and base R graphics are built on different underlying systems; Grid vs. Graphics, making it difficult to combine elements from both approaches on a single plot. I figured this out at first while attempting to use functions, variables, arguments, and techniques that I learned in one package within another."
  },
  {
    "objectID": "posts/Module 7/index.html",
    "href": "posts/Module 7/index.html",
    "title": "Module # 7: Assignment: Exploring R’s Object Oriented Systems (S3 & S4)",
    "section": "",
    "text": "This is my Module #7 post for my LIS4370 blog. Welcome!\nCode repository:\n\nhttps://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-07-R-Object\n\nTask # 1 - Choose or Download Data\n\nR is an interesting programming language that utilizes object oriented programming methods and structure to maximize the benefits of the four pillars of OOP, Encapsulation, Abstraction, Inheritance, and Polymorphism.\nWhat makes the R programming language unique, interesting, and versatile is the ability to create two distinct types of objects that have different characteristics and uses. The principal differences between S3 and S4 objects include the way in which classes are defined (S3 setting ‘class’ attribute & S4 using a setClass() method before object instantiation) and the structure of the object (S3 objects are informal, classes are not formally defined, becoming an object when a ‘class’ attribute is assigned & S4 objects are formal, structured objects that require ‘class’ definitions to specify class name and slots).\n\n#Load the \"mtcars\" data set and store to an r object 'my_cars'\ndata(\"mtcars\")\nmy_cars&lt;-mtcars\n#Print the first 5 rows of 'my_cars' object\nhead(my_cars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n#Explore the structure of 'my_cars' object\nstr(my_cars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nFrom the output above, the head() function executed, indicating that the object is an S3 object. Passing an S4 object as an argument to the head() function generates an error explaining that S4 objects are not subsetable.\nThe first line of output from the str() function call shows the objects type, in this case, it is a ‘data.frame’. Had this have been an S4 object, the output would have stated that the object is of a formal class and listed its name. This will be demonstrated in the Task 3 chunk of code that calls generic functions on both S3 and S4 objects to compare compatibility and output.\n\nTask # 2 - Test Generic Functions\n\nWe can tell if an object is an S3 or S4 class system object by using the isS4() method; if it is an S4 object, TRUE is returned, if it is an S3 object, FALSE is returned. A few more ways to check the objects class system are using the str() function (which starts its output with Formal class if it is an S4 object) and the class() function which shows the class name; for S3 objects, it doesn’t reveal the type of object system, while for S4 objects, it gives the formal class name.\nA generic function in ‘r’ is a fundamental utility of the ‘S3’ OOP system which allows a function call to behave differently based on the class of the object passed to it (method dispatch). When a generic function is called, r selects the method associated with the class of the object and uses a default if none are found. S3 objects method dispatch is based on the class attribute of the first argument and S4 can handle multiple dispatch (multiple arguments classes).\n\n#Check to see if 'my_cars' is an S3 or S4 class object\nisS4(my_cars)\n\n[1] FALSE\n\n#The output is 'FALSE' therefore 'my_cars' is an S3 object and the following\n#generic functions will dispatch:\n\n#print() - to display the object's data\nprint(my_cars)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n#summary() - gives a summary of the objects variables statistics\nsummary(my_cars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n#plot() - plots the variables on a graph\nplot(my_cars)\n\n\n\n\n\n\n\n\n\nTask # 3 - Explore S3 vs. S4\n\n\n#S3 object example\n\n#Create an S3 object using list() and initializing variables upon creation\ns3_obj &lt;- list(car = \"Ferarri\", year = 2009, cost = 135000)\n\n#Set the class of the object as an attribute\nclass(s3_obj) &lt;- \"car_s3\"\nclass(s3_obj)\n\n[1] \"car_s3\"\n\n#mode() - generic function to display object mode\nmode(s3_obj)\n\n[1] \"list\"\n\n#print() - generic function dispatch to display object\nprint(s3_obj)\n\n$car\n[1] \"Ferarri\"\n\n$year\n[1] 2009\n\n$cost\n[1] 135000\n\nattr(,\"class\")\n[1] \"car_s3\"\n\n#str() - generic function dispatch for display of the internal structure\nstr(s3_obj)\n\nList of 3\n $ car : chr \"Ferarri\"\n $ year: num 2009\n $ cost: num 135000\n - attr(*, \"class\")= chr \"car_s3\"\n\n# The output above uses the class() function to determine the class of the object\n# the output [1] \"car_s3\" is displayed because that is what the attribute was set to\n# the mode() returns [1] \"list\" because that is the object type. The print()\n# displays the attr(,\"class\") as [1] \"car_s3\" and str() states: - attr(*, \"class\")= chr \"car_s3\"\n\n\n#S4 class and object example\n\n#Create an S4 class using setClass() and define class variables upon creation\nsetClass(\"car_s4\",slots = c(car = \"character\", year = \"numeric\", cost = \"numeric\"))\n\n#Instantiate a new S4 object by calling the new() and initializing the variables\ns4_obj &lt;- new(\"car_s4\", car = \"Porsche\", year = 2009, cost = 75000)\nclass(s4_obj)\n\n[1] \"car_s4\"\nattr(,\"package\")\n[1] \".GlobalEnv\"\n\n#mode() - generic function to display object mode\nmode(s4_obj)\n\n[1] \"S4\"\n\n#print() - generic function dispatch to display object\nprint(s4_obj)\n\nAn object of class \"car_s4\"\nSlot \"car\":\n[1] \"Porsche\"\n\nSlot \"year\":\n[1] 2009\n\nSlot \"cost\":\n[1] 75000\n\n#str() - generic function dispatch for display of the internal structure\nstr(s4_obj)\n\nFormal class 'car_s4' [package \".GlobalEnv\"] with 3 slots\n  ..@ car : chr \"Porsche\"\n  ..@ year: num 2009\n  ..@ cost: num 75000\n\n# The output above uses the class() function to determine the class of the object\n# the output [1] \"car_s4\" attr(,\"package\") [1] \".GlobalEnv\" is displayed because\n# it is an S4 object and the mode() returns [1] \"S4\", the object type.\n# The print() displays An object of class \"car_s4\" and the Slots/values, and\n# str() states: Formal class 'car_s4' [package \".GlobalEnv\"] with 3 slots"
  },
  {
    "objectID": "posts/Module 5/index.html",
    "href": "posts/Module 5/index.html",
    "title": "Module # 5: Assignment: Matrix Algebra in R",
    "section": "",
    "text": "This is my Module #5 post for my LIS4370 blog. Welcome!\nCode repository:\n\nhttps://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-05-doing-math-1\nTask # 1 - Create matrices\n\n#In R, define\nA &lt;- matrix(1:100, nrow = 10)\nB &lt;- matrix(1:1000, nrow = 10)\n\nTask # 2 - Inspect dimensions\n\n#Verify whether each matrix is square\ndim(A) # should be 10 x 10\n\n[1] 10 10\n\ndim(B) # 10 x 100 - not square\n\n[1]  10 100\n\n\nTask # 3 - Compute inverse and determinant\n\n#Use solve() and det(); handle errors for non-square or singular matrices:\n\n#For A\ninvA &lt;- tryCatch(solve(A), error = function(e) print(e))\n\n&lt;simpleError in solve.default(A): Lapack routine dgesv: system is exactly singular: U[6,6] = 0&gt;\n\n# solve(A) does not work for my test! It produces an error!\n# Yes, the matrix is square, 10x10, however;\n# When I create matrix A, and use the solve() function the results produce\n# a calculation that states that Matrix A is exactly singular: U[6,6] = 0\n# This is perhaps due to strong correlations between the predictor variables:\ncor(A)\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1    1    1    1    1    1    1    1    1     1\n [2,]    1    1    1    1    1    1    1    1    1     1\n [3,]    1    1    1    1    1    1    1    1    1     1\n [4,]    1    1    1    1    1    1    1    1    1     1\n [5,]    1    1    1    1    1    1    1    1    1     1\n [6,]    1    1    1    1    1    1    1    1    1     1\n [7,]    1    1    1    1    1    1    1    1    1     1\n [8,]    1    1    1    1    1    1    1    1    1     1\n [9,]    1    1    1    1    1    1    1    1    1     1\n[10,]    1    1    1    1    1    1    1    1    1     1\n\n# I wrapped solve(A) in a try-catch function to get the program to run.\n\ndetA &lt;- det(A)\ndetA\n\n[1] 0\n\n# det(A) works, however, the output simply provides the 0 which indicates that\n# there is no inverse solution to this matrix, it is singular.\n\n#For B, use tryCatch to capture errors\ninvB &lt;- tryCatch(solve(B), error = function(e) print(e))\n\n&lt;simpleError in solve.default(B): 'a' (10 x 100) must be square&gt;\n\n# The operations on B fail because the dimensions of matrix B are 10x100\n# resulting in a non-square matrix that does not have an inverse solution.\n\ndetB &lt;- tryCatch(det(B), error = function(e) print(e))\n\n&lt;simpleError in determinant.matrix(x, logarithm = TRUE, ...): 'x' must be a square matrix&gt;\n\n# Therefore solve(B) will not produce a solution and det(B) will not as well.\n\nTask # 4 - Document your results\n\n# On your blog, include:\n\n# R code for creating A and B, and for computing invA, detA, invB, and detB\n# Shown Above.\n\n# Output or error messages for each operation.\n# Displayed after the erroneous function calls.\n\n# A brief explanation:\n\n# Why solve(A) and det(A) work.\n# Shown/explained above.\n\n# Any notes on numeric stability or performance.\n\n# Some notes on numeric stability include using randomized numbers that do\n# not match or correlate as closely. This will improve the performance of the\n# matrix linear algebra, and allow the functions/operations to compute\n# the correct results according to the proper matrix math, given that the\n# correct synax is provided in the code to perform the desired operations.\n# This can be considered when creating a linear model for bivariate and\n# multivariate linear regression and matrix math."
  },
  {
    "objectID": "posts/Module 3/index.html",
    "href": "posts/Module 3/index.html",
    "title": "Module # 3: Assignment: Introduction to data.frame",
    "section": "",
    "text": "This my Module #3 post for my LIS4370 blog. Welcome!\nTasks # 1 - Define and Inspect your data\n\n# In R, create vectors (correcting any syntax issues)\nName&lt;-c(\"Jeb\",\"Donald\",\"Ted\",\"Marco\",\"Carly\",\"Hillary\",\"Bernie\")\nABC_poll&lt;-c(4,62,51,21,2,14,15)\nCBS_poll&lt;-c(12,75,43,19,1,21,19)\n\n# Combine into a data frame\ndf_polls&lt;-data.frame(Name,ABC_poll,CBS_poll)\n\n# Use str() and head() to inspect your data frame\nstr(df_polls)\n\n'data.frame':   7 obs. of  3 variables:\n $ Name    : chr  \"Jeb\" \"Donald\" \"Ted\" \"Marco\" ...\n $ ABC_poll: num  4 62 51 21 2 14 15\n $ CBS_poll: num  12 75 43 19 1 21 19\n\nhead(df_polls)\n\n     Name ABC_poll CBS_poll\n1     Jeb        4       12\n2  Donald       62       75\n3     Ted       51       43\n4   Marco       21       19\n5   Carly        2        1\n6 Hillary       14       21\n\n\nTask # 2 - Compute Summary Statistics\n\n# Compute the mean, median, and range for each poll\n\n# mean for ABC poll\nmean(df_polls$ABC_poll)\n\n[1] 24.14286\n\n# median for ABC poll\nmedian(df_polls$ABC_poll)\n\n[1] 15\n\n# range for ABC poll\nrange(df_polls$ABC_poll)\n\n[1]  2 62\n\n# mean for CBS poll\nmean(df_polls$CBS_poll)\n\n[1] 27.14286\n\n# median for CBS poll\nmedian(df_polls$CBS_poll)\n\n[1] 19\n\n# range for CBS poll\nrange(df_polls$CBS_poll)\n\n[1]  1 75\n\n\n\n# Add a column for the difference between CBS and ABC\ndf_polls$Diff&lt;-df_polls$CBS_poll-df_polls$ABC_poll\n\nTasks # 3 & 4 - Discuss and Reflect after reading text and programming analysis\nOn your blog, write 2–3 paragraphs addressing:\nKey patterns you observe (e.g., which candidate shows the largest discrepancies).\nWhen looking at the data frame and the poll count values for each candidate, the data looks well organized at first with each candidates name and the estimated poll results side by side in each corresponding row for that candidate. The means for each poll are rather close with ABC_poll = ~24 and CBS_poll ~27 for a difference of ~3. The medians have slightly more variance as the ABC_polls = 15 and the CBS_polls = 19, a difference of 4. The ranges are close as well with the ABC_polls ranging from 2-62 and the CBS_polls from 1-75.\nWhen the ‘Diff’ column is calculated with CBS_poll-ABC_poll values: Donald shows the largest positive discrepancies and Ted shows the largest negative discrepancies.\nWhen the ‘Diff’ column is calculated with ABC_poll-CBS_poll values: Ted shows the largest positive discrepancies and Donald shows the largest negative discrepancies.\nImpact of using made‑up data—what limitations does this introduce?\nThe main impact and risks/limitations of using made up data seems to be the method chosen for evaluating the difference between the two polls. Depending on which poll value is subtracted from the other has a large impact on the final result. For ex. the results look much different in favor of one candidate for another when ABC_polls values are subtracted from CBS_polls values versus CBS_polls values are subtracted from ABC_polls values.\nHow you might collect or validate real poll data in a true analysis.\nOne strategy I would implement to collect or validate real poll data in a true analysis would be to label the difference specifically or to add a two bar visualization that shows the counts side by side to display the difference rather than using a subtraction method.\nInclude your R code (in a code chunk) and the generated plot.\n\nlibrary(ggplot2)\ndf_polls$Name&lt;-as.factor(df_polls$Name)\n\n# Here is the bar chart showing the difference between CBS_poll-ABC_poll\nggplot(df_polls,aes(x=Name,y=Diff, color=Diff, fill=Diff))+\n  geom_bar(stat = \"identity\")+\n  ylab(\"Difference between polls\")+\n  ggtitle(\"Difference between CBS_poll-ABC_poll\")\n\n\n\n\n\n\n\n# Re-calculate the Diff column for the difference between ABC and CBS\ndf_polls$Diff&lt;-df_polls$ABC_poll-df_polls$CBS_poll\n\n# Here is the bar chart showing the difference between ABC_poll-CBS_poll\nggplot(df_polls,aes(x=Name,y=Diff, color=Diff, fill=Diff))+\n  geom_bar(stat = \"identity\")+\n  ylab(\"Difference between polls\")+\n  ggtitle(\"Difference between ABC_poll-CBS_poll\")\n\n\n\n\n\n\n\n\nHere is a screenshot of my updated Github repo with the script and link to the new Module 3 blog post:\nhttps://rwalshusf.quarto.pub/httpsrwalshusfquartopubr-programming-journal---robert-walsh/posts/Module%203/"
  },
  {
    "objectID": "posts/Module 1/index.html",
    "href": "posts/Module 1/index.html",
    "title": "Module # 1: Assignment #1:",
    "section": "",
    "text": "This my first post for my LIS4370 blog. Welcome!\nTask # 1\nI have successfully created a GitHub repository named: r-programming-assignments\nHere is a screenshot of the repository and README.md:\n\nTasks # 2 & 3\nI have also created a blog titled “R Programming Journal – Robert Walsh”.\nHere is a screenshot of the blog and installed R Studio console:\n\nThe installation of R Studio was straightforward, mainly because I had already installed the program and IDE on my machine for a different course here at USF. One issue I had was connecting the blog project to the new GitHub repository. I resolved this problem by copying the commands that GitHub generated when the repository was created and then running them in the R Studio terminal. This worked well and connected the R Studio blog project to the Git Hub version control repository. A second issue that I encountered was software updates. I had not used R Studio for quite some time; therefore, I needed to complete some updates. After the updates were completed, I was able to use the software and the IDE. I am currently on a Windows 11 PC, using version ‘R 4.4.2’ and R Studio version ‘2024.12.0.467’.\nTask # 4\nWhen using the R programming language, vectors are fundamental objects or entities that serve as containers for storing data elements or data values. Vector container objects can be used in various ways to store data in the computer’s memory, and the vector addresses/information can be referenced at a later time, throughout the program to recall the values that are stored within them. Vectors are fundamental to data analysis in R because they have the ability and flexibility to have descriptive names that represent the data that they contain. The functions and applications in R Programming utilize the vector abstraction ability to enable programs to perform vector math and use vector elements as input parameters in functions. Results from calculations and analysis can be updated and stored in new or existing vectors, allowing further data analysis."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "UNIVERSITY OF SOUTH FLORIDA - SCHOOL OF INFORMATION STUDENT\nA blog for sharing my class assignments."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Programming Journal - Robert Walsh",
    "section": "",
    "text": "Module # 9: Assignment: Visualization in R – Base Graphics, Lattice, and ggplot2\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 8: Assignment: Input/Output, String Manipulation, and the plyr Package\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 7: Assignment: Exploring R’s Object Oriented Systems (S3 & S4)\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 6: Assignment: Matrix Operations and Construction\n\n\n\n\n\n\n\n\n\n\n\nSep 26, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 5: Assignment: Matrix Algebra in R\n\n\n\n\n\n\n\n\n\n\n\nSep 22, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 4: Assignment: Programming Structure in R\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 3: Assignment: Introduction to data.frame\n\n\n\n\n\n\n\n\n\n\n\nSep 5, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 2: Assignment: Importing Data and Function Evaluation in R\n\n\n\n\n\n\n\n\n\n\n\nAug 29, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\n\n\n\n\n\n\nModule # 1: Assignment #1:\n\n\n\n\n\n\n\n\n\n\n\nAug 24, 2025\n\n\nRobert Walsh\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Module 2/index.html",
    "href": "posts/Module 2/index.html",
    "title": "Module # 2: Assignment: Importing Data and Function Evaluation in R",
    "section": "",
    "text": "This my Module #2 post for my LIS4370 blog. Welcome!\nTasks # 1 & 2\nI have downloaded and reviewed the data import instructions. The ‘readr’ functions are more familiar to me than the ‘tidyr’ and I have experience reading and writing various data sets with .csv, .tsv, and html links. I have also read the assigned Chapters.\nTask # 3\nEvaluate the ‘myMean()’ function:\n\n# Use the vector:\n\nassignment2 &lt;- c(16, 18, 14, 22, 27, 17, 19, 17, 17, 22, 20, 22)\n\n# Consider the function:\n\nmyMean &lt;- function(assignment2) {\n  return(sum(assignment) / length(someData))\n}\n\n# Run myMean(assignment2) and record the output or error:\nmyMean(assignment2)\n\nError in myMean(assignment2): object 'assignment' not found\n\n# The result or error message from testing myMean(assignment2):\n\n\nThe function call for ‘myMean(assignment2)’ fails because the variable names inside the functions instructions are incorrect. The function takes an argument or input parameter of ‘assignment2’ and the instructions attempt to reference objects named ‘assignment’ in the sum() function and ‘someData’ in the length() function.\n\n# This is a corrected version of the myMean() function that correctly returns\n# the mean of 'assignment2'\n\nassignment2 &lt;- c(16, 18, 14, 22, 27, 17, 19, 17, 17, 22, 20, 22)\n\nmyMean &lt;- function(assignment2) {\n  return(sum(assignment2) / length(assignment2))\n}\n\n# Run myMean(assignment2) and record the output:\nmyMean(assignment2)\n\n[1] 19.25\n\n\nHere is a screenshot of my GitHub repository that shows the blog link and the corrected myMean function .R file: \nBlog link:\nhttps://rwalshusf.quarto.pub/httpsrwalshusfquartopubr-programming-journal---robert-walsh/"
  },
  {
    "objectID": "posts/Module 4/index.html",
    "href": "posts/Module 4/index.html",
    "title": "Module # 4: Assignment: Programming Structure in R",
    "section": "",
    "text": "This is my Module #4 post for my LIS4370 blog. Welcome!\nCode repository:\n\nhttps://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-04-programming-structure\nTasks # 1 - Data Preparation and Cleaning\n\n#Define each vector in R, converting categorical strings to numeric codes\n#(bad=1,good=0) (low=0,high=1) and handling NA's appropriately:\n\nFrequency&lt;-c(0.6,0.3,0.4,0.4,0.2,0.6,0.3,0.4,0.9,0.2)\nBloodPressure&lt;-c(103,87,32,42,59,109,78,205,135,176)\nFirstAssess&lt;-c(1,1,1,1,0,0,0,0,NA,1) ##(bad=1,good=0)\nSecondAssess&lt;-c(0,0,1,1,0,0,1,1,1,1) ##(low=0,high=1)\nFinalDecision&lt;-c(0,1,0,1,0,1,0,1,1,1) ##(low=0,high=1)\n\ndf_hosp&lt;-data.frame(Frequency,BloodPressure,FirstAssess,SecondAssess,FinalDecision,stringsAsFactors = FALSE)\n\n#Inspect and handle NA's\nsummary(df_hosp)\n\n   Frequency    BloodPressure     FirstAssess      SecondAssess FinalDecision\n Min.   :0.20   Min.   : 32.00   Min.   :0.0000   Min.   :0.0   Min.   :0.0  \n 1st Qu.:0.30   1st Qu.: 63.75   1st Qu.:0.0000   1st Qu.:0.0   1st Qu.:0.0  \n Median :0.40   Median : 95.00   Median :1.0000   Median :1.0   Median :1.0  \n Mean   :0.43   Mean   :102.60   Mean   :0.5556   Mean   :0.6   Mean   :0.6  \n 3rd Qu.:0.55   3rd Qu.:128.50   3rd Qu.:1.0000   3rd Qu.:1.0   3rd Qu.:1.0  \n Max.   :0.90   Max.   :205.00   Max.   :1.0000   Max.   :1.0   Max.   :1.0  \n                                 NA's   :1                                   \n\ndf_hosp&lt;-na.omit(df_hosp)\n# How handling of NA values affected your analysis:\n\n# There was one NA value in the data set and it changed from NA to '0' in the first\n# assessment column after applying the function to omit the NA value. This would\n# affect the results by placing one more patient into the 'good' blood pressure\n# category for the first assessment data.\ndf_hosp\n\n   Frequency BloodPressure FirstAssess SecondAssess FinalDecision\n1        0.6           103           1            0             0\n2        0.3            87           1            0             1\n3        0.4            32           1            1             0\n4        0.4            42           1            1             1\n5        0.2            59           0            0             0\n6        0.6           109           0            0             1\n7        0.3            78           0            1             0\n8        0.4           205           0            1             1\n10       0.2           176           1            1             1\n\n\nTask # 2 - Generate Basic Visualizations\n\n# How blood pressure varies with each Doctor's assessment and the final decision:\n\n# A. Side-by-Side Boxplots\n\nboxplot(BloodPressure~FirstAssess,data = df_hosp,names = c(\"Good\",\"Bad\"),ylab = \"Blood Pressure\",main = \"BP by First MD Assessment\")\n\n\n\n\n\n\n\n# The side-by-side boxplot for the first MD assessment does a good job at visualizing\n# the data frame with a chart that shows the minimum, maximum, and median blood\n# pressure measurements for the patients that have been labeled as having good\n# or bad blood pressure. The range from lower to upper quartiles is around 75-155\n# for good and 40-100 for bad with a median of around 85-95 on both. The overall\n# range for good measurements seems high at ~ 170.\n\nboxplot(BloodPressure~SecondAssess,data = df_hosp,names = c(\"Low\",\"High\"),ylab = \"Blood Pressure\",main = \"BP by Second MD Assessment\")\n\n\n\n\n\n\n\n# The side-by-side boxplot for the second MD assessment does a good job at visualizing\n# the data frame also showing the minimum, maximum, and median blood\n# pressure measurements for the patients that have been labeled as having low\n# or high blood pressure. The range from lower to upper quartiles shrinks to around\n# 75-110 for low and increases to 40-175 for high with the median remaining at\n# around 95 for low and decreasing to around 60-75 for high. The range for low\n# blood pressure  measurements is significantly lower at ~ 50.\n\nboxplot(BloodPressure~FinalDecision,data = df_hosp,names = c(\"Low\",\"High\"),ylab = \"Blood Pressure\",main = \"BP by Final Decision\")\n\n\n\n\n\n\n\n# The side-by-side boxplot for the final decision does a good job at visualizing\n# the data frame with a chart that shows the minimum, maximum, and median blood\n# pressure measurements for the patients that have been labeled as having low\n# or high blood pressure. The range from lower to upper quartiles shrinks to around\n# 50-95 for low and increases to 95-175 for high with the median dropping to\n# around 75 for low and increasing to around 105 for high\n\n# The final decision seems more conclusive and accurate with a narrower range\n# for low blood pressure and a wider range for high blood pressure.\n\n\n# B. Histograms\n# Visualize overall distributions of Frequency and Blood Pressure\nhist(df_hosp$Frequency,breaks = seq(0,1,by=0.1),xlab = \"Visit Frequency\",main = \"Histogram of Visit Frequency\")\n\n\n\n\n\n\n\nhist(df_hosp$BloodPressure,breaks = 8,xlab = \"Blood Pressure\",main = \"Histogram of Blood Pressure\")\n\n\n\n\n\n\n\n# Any notable patterns or outliers in the histograms:\n\n# When looking at the histograms, I noticed a pattern between visit frequency and\n# blood pressure levels that indicated the majority of patients visited between\n# 0.1 and 0.4 with blood pressure measurements of 50-110. The outliers seem to be\n# extreme blood pressure readings lower than 50 and higher than 150.\n\n# Potential clinical implications or limitations of this made up data:\n\n# One potential clinical implication or limitation of this made up data could be\n# extreme blood pressure measurements. I am not a medical professional, however\n# blood pressure measurements of 32 seem impossibly low for a patient to be alive.\n# Extremely high blood pressure measurements could be caused by the patients\n# mood or current state of being stressed out or very relaxed. Making up data\n# in this case could have dangerous health consequences for patients."
  },
  {
    "objectID": "posts/Module 6/index.html",
    "href": "posts/Module 6/index.html",
    "title": "Module # 6: Assignment: Matrix Operations and Construction",
    "section": "",
    "text": "This is my Module #6 post for my LIS4370 blog. Welcome!\nCode repository:\n\nhttps://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-06-doing-math-2\nTask # 1 - Matrix Addition & Subtraction\n\n#In R, define:\nA&lt;-matrix(c(2,0,1,3),ncol=2)\n#Using the matrix() function to create a matrix \"A\" with 2 rows and 2 columns that\n#includes scalar values of \"2,0,1,3\". R will row bind the elements by default\n#and the resulting matrix looks like this:\nA\n\n     [,1] [,2]\n[1,]    2    1\n[2,]    0    3\n\n#Using the matrix() function again to create another matrix \"B\" with 2 rows and\n#2 columns that includes scalar values of \"5,2,4,-1\".\nB&lt;-matrix(c(5,2,4,-1),ncol=2)\n#R will row bind the elements\n#by default and the resulting matrix looks like this:\nB\n\n     [,1] [,2]\n[1,]    5    4\n[2,]    2   -1\n\n#Then:\n\n#Compute A + B and display the result.\nAplusB&lt;-A+B\n#Matrix \"A\" and \"B\" can be added together using the following code that will\n#take the value from one cell and add it to the value in the same cell in the\n#second matrix. Here is the resulting matrix after calculations:\nAplusB\n\n     [,1] [,2]\n[1,]    7    5\n[2,]    2    2\n\n#Compute A - B and display the result.\nAminusB&lt;-A-B\n#Matrix \"A\" and \"B\" can be subtracted from each other using the following code\n#that will take the value from one cell and subtract it from the value in the\n#same cell in the second matrix. Here is the resulting matrix after calculations:\nAminusB\n\n     [,1] [,2]\n[1,]   -3   -3\n[2,]   -2    4\n\n\nTask # 2 - Create a Diagonal Matrix\n\n#Use diag() to build a 4×4 matrix with diagonal entries 4, 1, 2, 3:\n#Show the code and the resulting matrix.\nD&lt;-diag(c(4,1,2,3))\n#The diag() function creates a matrix with the specified vales/vector appearing\n#diagonally from top left to bottom right. The results look like this:\nD\n\n     [,1] [,2] [,3] [,4]\n[1,]    4    0    0    0\n[2,]    0    1    0    0\n[3,]    0    0    2    0\n[4,]    0    0    0    3\n\n\nTask # 3 - Construct a Custom 5×5 Matrix\n\n#Generate this matrix:\n#  [,1] [,2] [,3] [,4] [,5]\n#[1,]    3    1    1    1    1\n#[2,]    2    3    0    0    0\n#[3,]    2    0    3    0    0\n#[4,]    2    0    0    3    0\n#[5,]    2    0    0    0    3\n#Hint: combine diag() with cbind() or matrix().\n\n#This was a fun and challenging exercise. It was similar to solving a puzzle.\n#There are several ways to accomplish this task, however, I wanted to see if it\n#could be constructed by multiplying two matrices together.\n\n#Define the first matrix \"A\" as an identity matrix to base the row values\n#that will be used in the multiplication using the matrix() and cbind() functions\nA&lt;-matrix(cbind(c(1,2,2,2,2),c(1,1,0,0,0),c(1,0,1,0,0),c(1,0,0,1,0),c(1,0,0,0,1)),nrow=5)\n\n#Define matrix \"B\" using the diag() function to complete the necessary calculations\n#to place the correct values in the resulting matrix\nB&lt;-diag(c(1,3,3,3,3))\n\n#Multiply the two matrices together using the correct syntax to multiply matrices\n#in R and store the resulting matrix in a new matrix object.\nmatrix5x5&lt;-A%*%B\n#This is what I got:\nmatrix5x5\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    3    3    3\n[2,]    2    3    0    0    0\n[3,]    2    0    3    0    0\n[4,]    2    0    0    3    0\n[5,]    2    0    0    0    3\n\n#Unfortunately, after trying many combinations of numbers, I could not construct\n#the desired output with one multiplication of two matrices, so I had to manually\n#update a couple values for the output to match the desired results/matrix.\n\n# Fix the first row, first column to be 3\nmatrix5x5[1,1]&lt;-3\n# Fix the first row, columns 2-5 to be 1\nmatrix5x5[1,2:5] &lt;- 1\n# Print the correct matrix\nprint(matrix5x5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    3    1    1    1    1\n[2,]    2    3    0    0    0\n[3,]    2    0    3    0    0\n[4,]    2    0    0    3    0\n[5,]    2    0    0    0    3"
  },
  {
    "objectID": "posts/Module 8/index.html",
    "href": "posts/Module 8/index.html",
    "title": "Module # 8: Assignment: Input/Output, String Manipulation, and the plyr Package",
    "section": "",
    "text": "This is my Module #8 post for my LIS4370 blog. Welcome!\nCode repository:\n\nhttps://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-08-Input-Output-string\n\nTask # 1 - Import Assignment 6 Data\n\nIn order to read a text file from a computer into RStudio, the working directory must be specified or set. Then calling the read.table() function will read the file in table format and creates a data frame from it, with records corresponding to lines and variables/values to fields in the file.\n\n#Place the Assignment 6 dataset (tab‑ or space‑delimited) on your computer.\n#In R, read it into a data frame:\n\n#set working directory\nsetwd(\"C:/R Programming Journal – Robert Walsh/posts/Module 8\")\n# choose file\nstudent6 &lt;- read.table(\"Assignment 6 Dataset.txt\", header = TRUE, stringsAsFactors = FALSE,sep = \",\")\nstudent6\n\n        Name Age    Sex Grade\n1       Raul  25   Male    80\n2     Booker  18   Male    83\n3      Lauri  21 Female    90\n4     Leonie  21 Female    91\n5    Sherlyn  22 Female    85\n6    Mikaela  20 Female    69\n7    Raphael  23   Male    91\n8       Aiko  24 Female    97\n9   Tiffaney  21 Female    78\n10    Corina  23 Female    81\n11 Petronila  23 Female    98\n12    Alecia  20 Female    87\n13   Shemika  23 Female    97\n14    Fallon  22 Female    90\n15   Deloris  21 Female    67\n16    Randee  23 Female    91\n17     Eboni  20 Female    84\n18   Delfina  19 Female    93\n19 Ernestina  19 Female    93\n20      Milo  19   Male    67\n\n\nNext, the ‘student6’ data frame stored in memory can be used to organize or group specific records along with the data or text that they contain in their elements or components. The ‘plyr’ package contains helpful functions such as ddply() which can accept arguments to select specific rows and/or columns of a data frame, conduct operations on the data, and add new columns or rows that have the results organized as specified by the commands. In this case, the results are stored in a new object named ‘gender_mean’ that includes a new column named ‘GradeAverage’ that stores the mean of Grade by Sex and groups the records by Sex.\n\n#Load plyr and compute the mean of Grade by Sex\nlibrary(plyr)\ngender_mean &lt;- ddply(\n  student6,\n  \"Sex\",\n  transform,\n  GradeAverage = mean(Grade, na.rm = TRUE)\n)\ngender_mean\n\n        Name Age    Sex Grade GradeAverage\n1      Lauri  21 Female    90      86.9375\n2     Leonie  21 Female    91      86.9375\n3    Sherlyn  22 Female    85      86.9375\n4    Mikaela  20 Female    69      86.9375\n5       Aiko  24 Female    97      86.9375\n6   Tiffaney  21 Female    78      86.9375\n7     Corina  23 Female    81      86.9375\n8  Petronila  23 Female    98      86.9375\n9     Alecia  20 Female    87      86.9375\n10   Shemika  23 Female    97      86.9375\n11    Fallon  22 Female    90      86.9375\n12   Deloris  21 Female    67      86.9375\n13    Randee  23 Female    91      86.9375\n14     Eboni  20 Female    84      86.9375\n15   Delfina  19 Female    93      86.9375\n16 Ernestina  19 Female    93      86.9375\n17      Raul  25   Male    80      80.2500\n18    Booker  18   Male    83      80.2500\n19   Raphael  23   Male    91      80.2500\n20      Milo  19   Male    67      80.2500\n\n\nThe write.table() function is a helpful tool in RStudio that allows a program to write data from a data frame into a text file and store it in the working directory.\n\n#Write the grouped means to a text file\nwrite.table(\n  gender_mean,\n  file = \"gender_mean.txt\",\n  sep  = \",\",\n  row.names = FALSE\n)\n\n\nTask # 2 - Filter Names Containing ‘i’\n\nTo conduct further analysis or operations on a subset of the data in the ‘student6’ data frame, the subset() function allows the program to filter character data in strings with regular expressions. The data frame is passed into the function as an argument, along with the reg ex expression using the grep() function. This matches the data to the specified parameters and returns matching values or records as indicated/requested. The results include students who’s Name includes an ‘i’ or ‘I’ character.\n\n#Convert the data (if not already) to a data frame (see above).\n#Select rows where Name contains 'i' or 'I'\ni_students &lt;- subset(\n  student6,\n  grepl(\"[iI]\", Name, ignore.case = TRUE)\n)\ni_students\n\n        Name Age    Sex Grade\n3      Lauri  21 Female    90\n4     Leonie  21 Female    91\n6    Mikaela  20 Female    69\n8       Aiko  24 Female    97\n9   Tiffaney  21 Female    78\n10    Corina  23 Female    81\n11 Petronila  23 Female    98\n12    Alecia  20 Female    87\n13   Shemika  23 Female    97\n15   Deloris  21 Female    67\n17     Eboni  20 Female    84\n18   Delfina  19 Female    93\n19 Ernestina  19 Female    93\n20      Milo  19   Male    67\n\n\nFrom this subset/data frame, the Names of the selected students can be extracted and written to a .csv comma separated values file in the working directory for further operations or analysis specifications.\n\n#Extract just the names and write them to a CSV\nwrite.csv(\n  i_students$Name,\n  file      = \"i_students.csv\",\n  row.names = FALSE,\n  quote     = FALSE\n)\n\n\nTask # 3 - Export Filtered Dataset\n\nFinally, all of the records in the ‘i_students’ data frame can be exported to a .csv comma separated values file in the working directory or any specified directory chosen for further operations or analysis.\n\n#Save the full filtered data frame to a CSV\nwrite.csv(\n  i_students,\n  file      = \"i_students_full.csv\",\n  row.names = FALSE\n)\n\n#Confirm the files gender_mean.txt, i_students.csv, and i_students_full.csv\n#exist in your working directory."
  }
]