---
title: "Module # 7: Assignment: Exploring Râ€™s Object Oriented Systems (S3 & S4)"
author: "Robert Walsh"
date: "2025-10-08"
---

This is my Module #7 post for my LIS4370 blog. Welcome!

Code repository:

[![](mod7git.png)](mod7git.png)

<https://github.com/rwalshUSF/RProgrammingFall2025WalshRobert/tree/main/assignments/assignment-07-R-Object>

********************************************************************************************************

Task \# 1 - Choose or Download Data

********************************************************************************************************

R is an interesting programming language that utilizes object oriented programming methods and structure to maximize the benefits of the four pillars of OOP, Encapsulation, Abstraction, Inheritance, and Polymorphism.

What makes the R programming language unique, interesting, and versatile is the ability to create two distinct types of objects that have different characteristics and uses. The principal differences between S3 and S4 objects include the way in which classes are defined (S3 setting 'class' attribute & S4 using a setClass() method before object instantiation) and the structure of the object (S3 objects are informal, classes are not formally defined, becoming an object when a 'class' attribute is assigned & S4 objects are formal, structured objects that require 'class' definitions to specify class name and slots).

```{r}
#Load the "mtcars" data set and store to an r object 'my_cars'
data("mtcars")
my_cars<-mtcars
#Print the first 5 rows of 'my_cars' object
head(my_cars)
#Explore the structure of 'my_cars' object
str(my_cars)
```

From the output above, the head() function executed, indicating that the object is an S3 object. Passing an S4 object as an argument to the head() function generates an error explaining that S4 objects are not subsetable.

The first line of output from the str() function call shows the objects type, in this case, it is a 'data.frame'. Had this have been an S4 object, the output would have stated that the object is of a formal class and listed its name. This will be demonstrated in the Task 3 chunk of code that calls generic functions on both S3 and S4 objects to compare compatibility and output.

*********************************************************************************************************

Task \# 2 - Test Generic Functions

*********************************************************************************************************

We can tell if an object is an S3 or S4 class system object by using the isS4() method; if it is an S4 object, TRUE is returned, if it is an S3 object, FALSE is returned. A few more ways to check the objects class system are using the str() function (which starts its output with Formal class if it is an S4 object) and the class() function which shows the class name; for S3 objects, it doesn't reveal the type of object system, while for S4 objects, it gives the formal class name.

A generic function in 'r' is a fundamental utility of the 'S3' OOP system which allows a function call to behave differently based on the class of the object passed to it (method dispatch). When a generic function is called, r selects the method associated with the class of the object and uses a default if none are found. S3 objects method dispatch is based on the class attribute of the first argument and S4 can handle multiple dispatch (multiple arguments classes). 

```{r}
#Check to see if 'my_cars' is an S3 or S4 class object
isS4(my_cars)

#The output is 'FALSE' therefore 'my_cars' is an S3 object and the following
#generic functions will dispatch:

#print() - to display the object's data
print(my_cars)
#summary() - gives a summary of the objects variables statistics
summary(my_cars)
#plot() - plots the variables on a graph
plot(my_cars)
```

********************************************************************************************************

Task \# 3 - Explore S3 vs. S4

********************************************************************************************************

```{r}
#S3 object example

#Create an S3 object using list() and initializing variables upon creation
s3_obj <- list(car = "Ferarri", year = 2009, cost = 135000)

#Set the class of the object as an attribute
class(s3_obj) <- "car_s3"
class(s3_obj)
#mode() - generic function to display object mode
mode(s3_obj)
#print() - generic function dispatch to display object
print(s3_obj)
#str() - generic function dispatch for display of the internal structure
str(s3_obj)

# The output above uses the class() function to determine the class of the object
# the output [1] "car_s3" is displayed because that is what the attribute was set to
# the mode() returns [1] "list" because that is the object type. The print()
# displays the attr(,"class") as [1] "car_s3" and str() states: - attr(*, "class")= chr "car_s3"


#S4 class and object example

#Create an S4 class using setClass() and define class variables upon creation
setClass("car_s4",slots = c(car = "character", year = "numeric", cost = "numeric"))

#Instantiate a new S4 object by calling the new() and initializing the variables
s4_obj <- new("car_s4", car = "Porsche", year = 2009, cost = 75000)
class(s4_obj)
#mode() - generic function to display object mode
mode(s4_obj)
#print() - generic function dispatch to display object
print(s4_obj)
#str() - generic function dispatch for display of the internal structure
str(s4_obj)

# The output above uses the class() function to determine the class of the object
# the output [1] "car_s4" attr(,"package") [1] ".GlobalEnv" is displayed because
# it is an S4 object and the mode() returns [1] "S4", the object type.
# The print() displays An object of class "car_s4" and the Slots/values, and
# str() states: Formal class 'car_s4' [package ".GlobalEnv"] with 3 slots
```



